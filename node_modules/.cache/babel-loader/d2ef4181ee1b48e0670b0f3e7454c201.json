{"ast":null,"code":"var _jsxFileName = \"/Users/kim-wonjun/Project/reat-emotion-study-group/src/components/dropdown/DropdownComponent.tsx\";\nimport React from 'react';\nimport { Dropdown } from 'react-bootstrap';\nexport class DropdownComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderElem = (elem, index) => {\n      return React.createElement(Dropdown.Item, {\n        key: index,\n        onSelect: (eventKey, e) => this.handleSelect(elem, index),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, elem);\n    };\n\n    this.handleSelect = (elem, index) => {\n      this.props.onSelect && this.props.onSelect(index);\n      this.setState({\n        selected: this.convertToString(elem),\n        selectedIndex: index.toString()\n      });\n    };\n\n    this.convertToString = elem => {\n      if (elem !== undefined && elem !== null) {\n        return elem.toString();\n      }\n\n      return '';\n    };\n\n    const selectedValue = this.props.placeholder || this.convertToString(this.props.list[0]);\n    this.state = {\n      selected: selectedValue,\n      selectedIndex: '0'\n    };\n  }\n\n  render() {\n    const {\n      selected\n    } = this.state;\n    const {\n      list\n    } = this.props;\n    return React.createElement(\"div\", {\n      className: \"cr-dropdown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(Dropdown.Toggle, {\n      variant: \"primary\",\n      id: \"dropdown-basic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, selected), React.createElement(Dropdown.Menu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, list.map((elem, index) => this.renderElem(elem, index)))));\n  }\n\n}","map":{"version":3,"sources":["/Users/kim-wonjun/Project/reat-emotion-study-group/src/components/dropdown/DropdownComponent.tsx"],"names":["React","Dropdown","DropdownComponent","Component","constructor","props","renderElem","elem","index","eventKey","e","handleSelect","onSelect","setState","selected","convertToString","selectedIndex","toString","undefined","selectedValue","placeholder","list","state","render","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAeA,OAAO,MAAMC,iBAAN,SAAgCF,KAAK,CAACG,SAAtC,CAAqG;AACxGC,EAAAA,WAAW,CAACC,KAAD,EAAgC;AACvC,UAAMA,KAAN;;AADuC,SA2BnCC,UA3BmC,GA2BtB,CAACC,IAAD,EAAqBC,KAArB,KAAuC;AACxD,aACI,oBAAC,QAAD,CAAU,IAAV;AACI,QAAA,GAAG,EAAEA,KADT;AAEI,QAAA,QAAQ,EAAG,CAACC,QAAD,EAAgBC,CAAhB,KAAsD,KAAKC,YAAL,CAAkBJ,IAAlB,EAAwBC,KAAxB,CAFrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIKD,IAJL,CADJ;AAQH,KApC0C;;AAAA,SAsCnCI,YAtCmC,GAsCpB,CAACJ,IAAD,EAAqBC,KAArB,KAAuC;AAC1D,WAAKH,KAAL,CAAWO,QAAX,IAAuB,KAAKP,KAAL,CAAWO,QAAX,CAAoBJ,KAApB,CAAvB;AACA,WAAKK,QAAL,CAAc;AACVC,QAAAA,QAAQ,EAAE,KAAKC,eAAL,CAAqBR,IAArB,CADA;AAEVS,QAAAA,aAAa,EAAER,KAAK,CAACS,QAAN;AAFL,OAAd;AAIH,KA5C0C;;AAAA,SA8CnCF,eA9CmC,GA8ChBR,IAAD,IAAwB;AAC9C,UAAIA,IAAI,KAAKW,SAAT,IAAsBX,IAAI,KAAK,IAAnC,EAAyC;AACrC,eAAOA,IAAI,CAACU,QAAL,EAAP;AACH;;AACD,aAAO,EAAP;AACH,KAnD0C;;AAEvC,UAAME,aAAa,GAAG,KAAKd,KAAL,CAAWe,WAAX,IAA0B,KAAKL,eAAL,CAAqB,KAAKV,KAAL,CAAWgB,IAAX,CAAgB,CAAhB,CAArB,CAAhD;AACA,SAAKC,KAAL,GAAa;AACTR,MAAAA,QAAQ,EAAEK,aADD;AAETH,MAAAA,aAAa,EAAE;AAFN,KAAb;AAIH;;AAEMO,EAAAA,MAAP,GAAgB;AACZ,UAAM;AAAET,MAAAA;AAAF,QAAe,KAAKQ,KAA1B;AACA,UAAM;AAAED,MAAAA;AAAF,QAAW,KAAKhB,KAAtB;AAEA,WACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD,CAAU,MAAV;AAAiB,MAAA,OAAO,EAAC,SAAzB;AAAmC,MAAA,EAAE,EAAC,gBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKS,QADL,CADJ,EAII,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKO,IAAI,CAACG,GAAL,CAAS,CAACjB,IAAD,EAAOC,KAAP,KAAiB,KAAKF,UAAL,CAAgBC,IAAhB,EAAsBC,KAAtB,CAA1B,CADL,CAJJ,CADJ,CADJ;AAYH;;AA1BuG","sourcesContent":["import React from 'react';\nimport { Dropdown } from 'react-bootstrap';\n\ntype DropdownElem = number | string | React.ReactNode;\n\nexport interface DropdownComponentProps {\n    list: DropdownElem[];\n    onSelect?: (index: number) => void;\n    placeholder?: string;\n}\n\ninterface DropdownComponentState {\n    selected: string;\n    selectedIndex: string;\n}\n\nexport class DropdownComponent extends React.Component<DropdownComponentProps & {}, DropdownComponentState> {\n    constructor(props: DropdownComponentProps) {\n        super(props);\n        const selectedValue = this.props.placeholder || this.convertToString(this.props.list[0]);\n        this.state = {\n            selected: selectedValue,\n            selectedIndex: '0',\n        };\n    }\n\n    public render() {\n        const { selected } = this.state;\n        const { list } = this.props;\n\n        return (\n            <div className=\"cr-dropdown\">\n                <Dropdown>\n                    <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n                        {selected}\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        {list.map((elem, index) => this.renderElem(elem, index))}\n                    </Dropdown.Menu>\n                </Dropdown>\n            </div>\n        );\n    }\n\n    private renderElem = (elem: DropdownElem, index: number) => {\n        return  (\n            <Dropdown.Item\n                key={index}\n                onSelect={ (eventKey: any, e?: React.SyntheticEvent<unknown>) => this.handleSelect(elem, index)}\n            >\n                {elem}\n            </Dropdown.Item>\n        );\n    }\n\n    private handleSelect = (elem: DropdownElem, index: number) => {\n        this.props.onSelect && this.props.onSelect(index);\n        this.setState({\n            selected: this.convertToString(elem),\n            selectedIndex: index.toString(),\n        });\n    };\n\n    private convertToString = (elem: DropdownElem) => {\n        if (elem !== undefined && elem !== null) {\n            return elem.toString();\n        }\n        return '';\n    };\n}\n"]},"metadata":{},"sourceType":"module"}